#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C0413,C0103,E1121


"""OBJR - objects runtime

    objr  <cmd> [key=val] [key==val]
    objr  [-a] [-c] [-h] [-v]

    options are:

    -a     load all modules
    -c     start console
    -h     show help
    -v     use verbose

    the cmd command show available commands.
    
    $ objr cmd
    cfg,cmd,dpl,err,exp,imp,mod,mre,nme,pwd,rem,res,rss,thr

"""


import os
import sys
import termios
import time


sys.path.insert(0, os.getcwd())


from objr import errors
from objz import Cfg, Console, Logging, cmnd, debug, init, parse, scan


from objz import modules


def getmods(path, modname="mods"):
    "return modules"
    path = os.path.dirname(path)
    if path not in sys.path:
        sys.path.insert(0, path)
    return __import__(modname)


def wrap(func):
    "restore console."
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)
    errors()


def main():
    "main"
    parse(Cfg, " ".join(sys.argv[1:]))
    if os.path.exists("mods") or Cfg.sets.mdir:
        mods = getmods(Cfg.sets.mdir or "mods")
    else:
        mods = None
    if "h" in Cfg.opts:
        print(__doc__)
        return
    if "a" in Cfg.opts:
        Cfg.mod = ",".join(dir(modules))
    if "v" in Cfg.opts:
        Logging.out = print
        dte = " ".join(time.ctime(time.time()).replace("  ", " ").split()[1:])
        debug(f'{dte} {Cfg.name.upper()} {Cfg.opts.upper()} {Cfg.mod.upper()}'.replace("  ", " "))
    scan(Cfg.mod, modules)
    scan(Cfg.mod, mods)
    if "c" in Cfg.opts:
        init(Cfg.mod, mods)
        init(Cfg.mod, modules)
        csl = Console()
        csl.start()
        csl.forever()
    elif Cfg.otxt:
        cmnd(Cfg.otxt, print)


if __name__ == "__main__":
    wrap(main)
